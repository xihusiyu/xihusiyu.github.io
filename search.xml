<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL实战45讲学习笔记1</title>
      <link href="/2021/09/12/MySQL45-1/"/>
      <url>/2021/09/12/MySQL45-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考了极客时间里林晓斌老师的【MySQL实战45讲】</p></blockquote><h3 id="一条查询语句的执行流程"><a href="#一条查询语句的执行流程" class="headerlink" title="一条查询语句的执行流程"></a>一条查询语句的执行流程</h3><h4 id="MySQL逻辑架构"><a href="#MySQL逻辑架构" class="headerlink" title="MySQL逻辑架构"></a>MySQL逻辑架构</h4><img src="https://gitee.com/xyming108/blog_img/raw/master/mysql_45/mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%9B%BE.png" style="zoom: 40%;" /><div align="center">MySQL的逻辑架构图</div><p>Server层包含MySQL的大多数核心服务，和所有内置函数，所有跨存储引擎功能的实现</p><p>存储引擎层负责数据的存储和提取，包括InnoDB、MyISAM、Memory等多个存储引擎，InnoDB从MySQL5.5.5版本开始成为了默认存储引擎，可以自由选择存储引擎：engine=InnoDB</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `t` &#123;</span><br><span class="line"></span><br><span class="line">&#125;engine<span class="operator">=</span>InnoDB</span><br></pre></td></tr></table></figure><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 主机名 -P 端口号 -u 用户名 -p密码 </span><br></pre></td></tr></table></figure><p>例如：mysql 【-h localhost P 3306】 -u root -p564445 ，若是登录本地的，【】内的可以不写。-p和密码中间不能加空格，也可以-p之后直接回车再输入密码，这时候密码是隐藏的，安全性更高</p><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。key是查询的语句，value是查询的结果。如果查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客户端。如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。如果查询命中缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结果，效率更高。</p><p>但查询缓存更适合业务上有一张静态表的情况，很长时间才会更新一次，如果更新太频繁，表上的查询缓存会被清空，导致的使用率不高。MySQL8.0版本直接将查询缓存的整块功能删掉了，从8.0版本开始彻底没有这个功能了。</p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p> 分析器会对语句做“词法分析”，识别里面的各种字符代表什么，语法规则是否正确等等，一般语法错误会提示第一个出现错误的位置</p><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。不同的执行顺序会导致效率的高低，通常会选择效率更高的情况，但是也会出现选错的情况</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><ol><li>先判断对表T有没有执行权限，没有权限会报错</li><li>然后使用引擎提供的接口，开始执行逻辑</li><li>然后将结果返回给客户端</li></ol><h3 id="一条更新语句的执行流程"><a href="#一条更新语句的执行流程" class="headerlink" title="一条更新语句的执行流程"></a>一条更新语句的执行流程</h3><p>建表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `T`(</span><br><span class="line">  ID  <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">  c   <span class="type">int</span></span><br><span class="line">)engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>将ID=2的值加1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update T <span class="built_in">set</span> c=c+1 <span class="built_in">where</span> ID=2;</span><br></pre></td></tr></table></figure><p>执行流程</p><ol><li>连接数据库</li><li>因为有更新，所以会清空缓存数据，导致命中率不高，这也是为什么前面建议不适用查询缓存的原因</li><li>分析器通过词法和语法解析知道这是一条更新语句</li><li>优化器决定使用ID这个索引</li><li>执行器负责执行逻辑，找到这一行然后更新</li></ol><p>更新流程和查询流程大体上的执行顺序相似，但是更新流程还涉及到两个重要的日志模块：redo log（重做日志）和bin log（归档日志）</p><h4 id="redo-log模块"><a href="#redo-log模块" class="headerlink" title="redo log模块"></a>redo log模块</h4><p>先分析问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高</p><p>这时候就需要redo log了，当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log里，并更新内存，这个时候更新就算完成了。InnoDB引擎会在空闲的时候，将这个操作记录批量更新到磁盘里面，减少对磁盘的IO操作</p><p>这其实就是MySQL里经常说到的WAL技术，WAL的全称是Write-Ahead-Logging（预写式日志），它的关键点就是先写日志，再写磁盘</p><p>InnoDB的redo log大小固定，比如可以配置一组4个文件，每个文件1GB，总共4GB，从头到尾循环写入，如下图</p><p><img src="https://gitee.com/xyming108/blog_img/raw/master/mysql_45/regolog%E5%BE%AA%E7%8E%AF%E5%86%99.png"></p><div align="center">redo log循环写入</div><p>write pos是当前正在记录的位置，从0号文件到3号文件，然后循环回0号文件，checkpoint是将当前数据更新到磁盘。</p><p>有了redo log，InnoDB可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，称为crash-safe</p><h4 id="binlog模块"><a href="#binlog模块" class="headerlink" title="binlog模块"></a>binlog模块</h4><p>上面的redo log是InnoDB存储引擎层特有的日志，而binlog则属于Server层。因为最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统，也就是redo log来实现crash-safe能力</p><p>redo log和binlog的三个不同点：</p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用</li><li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1”</li><li>redo log是循环写的，会把之前的覆盖掉，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志</li></ol><p>现在再来看看加上和两个日志模块后，update语句在执行器的执行流程</p><img src="https://gitee.com/xyming108/blog_img/raw/master/mysql_45/update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" style="zoom:40%;" /><div align="center">update语句在执行器的执行流程</div><ol><li>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是c，现在就是c+1，得到新的一行数据，再调用引擎接口写入这行新数据</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成</li></ol><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>上述最后三步中，将redo log的写入拆成了两个步骤：prepare和commit，即两阶段提交，两阶段提交的目的是：为了让两份日志之间的逻辑一致</p><p>先来看看数据恢复过程。binlog会记录所有的逻辑操作，如果设定的是可以恢复一个月，那么备份系统中一定会保存最近一个月的所有binlog，前面讲到binlog可以追加写入，并不会覆盖以前的日志，当要找回数据时：</p><ol><li>找到最近一次的备份恢复到临时库</li><li>从备份的时间点开始，将备份的binlog依次取出来，重放到误删表之前的时刻</li><li>按需恢复到线上库</li></ol><p>为什么一定是两阶段提交呢？</p><p>可以使用binlog替代redo log进行数据恢复吗？不可以，Innodb利用WAL技术进行数据恢复，write ahead logging技术依赖于物理日志进行数据恢复，binlog不是物理日志是逻辑日志，因此无法使用</p><p>可以只使用redo log而不使用binlog吗？不可以，redo log是循环写，写到末尾要回到开头继续写，这样的日志无法保留历史记录，会被覆盖掉，无法进行数据复制</p><p>由于redo log和binlog是两个独立的逻辑，如果不用两阶段提交，要么就是先写完redolog再写binlog，或者采用反过来的顺序。若在写完第一个日志后，第二个日志还没有写完期间发生了crash，数据库的状态可能和用日志恢复出来的数据库的状态不一致，下面是不采用两阶段提交的情况：</p><ol><li>先写redo log后写binlog。<br> 假设在redo log写完，binlog还没有写完的时候，MySQL进程异常重启。由于前面说过，redo log写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行c的值是1。但是由于binlog没写完就crash了，这时候binlog里面就没有记录这个语句。因此，之后备份日志的时候，存起来的binlog里面就没有这条语句。然后会发现，如果需要用这个binlog来恢复临时库的话，由于这个语句的binlog丢失，这个临时库就会少了这一次更新，恢复出来的这一行c的值就是0，与原库的值不同</li><li>先写binlog后写redo log。<br> 如果在binlog写完之后crash，由于redo log还没写，崩溃恢复以后这个事务无效，所以这一行c的值是0。但是binlog里面已经记录了“把c从0改成1”这个日志。所以，在之后用binlog来恢复的时候就多了一个事务出来，恢复出来的这一行c的值就是1，与原库的值不同</li></ol><p>由上述分析可见，如果不采用两阶段提交，数据库的状态就有可能和用它的日志恢复出来的库的状态不一致</p><p>采用两阶段提交后：</p><ol><li>redo log好没写入之前崩溃，这时binlog也还没写入，恢复数据不受影响</li><li>redo log写好了，binlog还没写崩溃时，这时redo log处于prepare状态，还没有提交，恢复时事务会回滚，binlog也还没有记录，所以不会影响</li><li>redo log已经有了commit标识，则直接提交事务，同时因为binlog有记录，则恢复数据也不受影响</li></ol><h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><p>在MySQL中，事务是在引擎层实现的，MySQl的原生引擎MyISAM不支持事务，而InnoDB支持。</p><h4 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h4><p>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）</p><ol><li><p>原子性（Atomicity）：事务开始后的所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位</p></li><li><p>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到</p></li><li><p>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账</p></li><li><p>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</p></li></ol><h4 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h4><table><thead><tr><th align="left">问题</th><th align="left">描述</th><th>举例</th></tr></thead><tbody><tr><td align="left">脏读</td><td align="left">当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个修改了但未提交的数据，并且使用了这个数据</td><td>张三的工资为5000,事务A中把他的工资改为8000,但事务A尚未提交。与此同时，事务B正在读取张三的工资，读取到张三的工资为8000。随后，事务A发生异常，而回滚了事务。张三的工资又回滚为5000。最后，事务B读取到的张三工资为8000的数据即为脏数据，事务B做了一次脏读</td></tr><tr><td align="left">不可重复读</td><td align="left">在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读</td><td>在事务A中，读取到张三的工资为5000，操作没有完成，事务还没提交。与此同时，事务B把张三的工资改为8000，并提交了事务。随后，在事务A中，再次读取张三的工资，此时工资变为8000。在一个事务中前后两次读取的结果并不致，导致了不可重复读</td></tr><tr><td align="left">幻读</td><td align="left">当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入/删除一行新数据。那么，以后就会发生操作第一个事务的用户发现表中多出/丢失的数据行，就好象发生了幻觉一样</td><td>目前工资为5000的员工有10人，事务A读取所有工资为5000的人数为10人。此时，事务B插入一条工资也为5000的记录。这是，事务A再次读取工资为5000的员工，记录为11人。此时产生了幻读</td></tr></tbody></table><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>为了解决事务并发问题，就有了“隔离级别”的概念，隔离得越严实，即隔离等级越高，效率越低。Oracle数据库的默认隔离级别是读已提交，MySQL数据库的默认隔离级别是可重复读，可以参考这篇文章：<a href="https://www.linuxidc.com/Linux/2020-04/162851.htm">MySQL数据库的默认隔离级别为什么是可重复读？</a></p><table><thead><tr><th align="left">隔离级别</th><th>描述</th><th>出现脏读</th><th>出现不可重复读</th><th>出现幻读</th><th>加锁</th></tr></thead><tbody><tr><td align="left">读未提交（read uncommitted）</td><td>即能够读取到没有被提交的数据</td><td>是</td><td>是</td><td>是</td><td><font color='red'>否</font></td></tr><tr><td align="left">读已提交（read committed）</td><td>即能够读到那些已经提交的数据</td><td><font color='red'>否</font></td><td>是</td><td>是</td><td><font color='red'>否</font></td></tr><tr><td align="left">可重复读（repeatable read）</td><td>一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的</td><td><font color='red'>否</font></td><td><font color='red'>否</font></td><td>是</td><td><font color='red'>否</font></td></tr><tr><td align="left">串行化（serializable）</td><td>“写”会加“写锁”，“读”会加“读锁”，不管多少事务，运行完一个事务的所有子事务之后才可以执行下一个事务</td><td><font color='red'>否</font></td><td><font color='red'>否</font></td><td><font color='red'>否</font></td><td>是</td></tr></tbody></table><p>举个例子</p><img src="https://gitee.com/xyming108/blog_img/raw/master/mysql_45/%E4%BA%8B%E5%8A%A1.png" style="zoom:50%;" /><div align="center">隔离级别例子</div><ol><li>若隔离级别是“读未提交”，则V1的值就是2。这时候事务B虽然还没有提交，但是结果已经被A看到了。因此，V2、V3也都是2</li><li>若隔离级别是“读提交”，则V1是1，V2的值是2。事务B的更新在提交后才能被A看到。所以，V3的值也是2</li><li>若隔离级别是“可重复读”，则V1、V2是1，V3是2。之所以V2还是1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的</li><li>若隔离级别是“串行化”，则在事务B执行“将1改成2”的时候，会被锁住。直到事务A提交后，事务B才可以继续执行。所以从A的角度看，V1、V2值是1，V3的值是2</li></ol><h4 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h4><p>以可重复读为例，在MySQL中，每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。假设一个值从1按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录</p><img src="https://gitee.com/xyming108/blog_img/raw/master/mysql_45/%E5%9B%9E%E6%BB%9A.png" style="zoom:50%;" /><div align="center">回滚日志</div><p>当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多个版本，这就是数据库的<a href="https://baike.baidu.com/item/MVCC/6298019?fr=aladdin">多版本并发控制 MVCC</a>（Multi-Version Concurrency Control），对于read-view A，要得到1，就必须将当前值依次执行图中所有的回滚操作得到，即使现在有另外一个事务正在将4改成5，这个事务跟read-view A、B、C对应的事务是不会冲突的</p><h4 id="长事务"><a href="#长事务" class="headerlink" title="长事务"></a>长事务</h4><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致占用大量存储空间，这是一个不容忽视的问题。</p><p>MySQL的事务启动方式有以下几种</p><ol><li><p>显式启动事务语句，begin或start transaction。配套的提交语句是commit，回滚语句是rollback</p></li><li><p>set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个select语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行commit或rollback语句，或者断开连接</p></li></ol><p>有些客户端连接框架会默认连接成功后先执行一个set autocommit=0的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。因此，建议使用set autocommit=1，通过显式语句的方式来启动事务，在autocommit为1的情况下，用begin显式启动的事务，如果执行commit则提交事务，可以避免长事务</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Day5</title>
      <link href="/2021/03/18/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day5/"/>
      <url>/2021/03/18/mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day5/</url>
      
        <content type="html"><![CDATA[<h1 id="Day"><a href="#Day" class="headerlink" title="Day"></a>Day</h1><h3 id="1、函数"><a href="#1、函数" class="headerlink" title="1、函数"></a><strong>1、函数</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：一组预先编译好的SQL语句的集合，可理解成批处理语句</span></span><br><span class="line"><span class="comment">1、提高代码的重用性</span></span><br><span class="line"><span class="comment">2、简化操作</span></span><br><span class="line"><span class="comment">3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">区别：</span></span><br><span class="line"><span class="comment">存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新</span></span><br><span class="line"><span class="comment">函数：有且仅有一个返回，适合做处理数据后返回一个结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、创建语法</span></span><br><span class="line"><span class="comment">create function 函数名（参数列表） return 返回类型</span></span><br><span class="line"><span class="comment">begin</span></span><br><span class="line"><span class="comment">函数体</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">1、参数列表包含两部分：</span></span><br><span class="line"><span class="comment">参数名、参数类型</span></span><br><span class="line"><span class="comment">2、函数体：肯定会有return语句，如果没有会报错，如果return语句没有放在函数体的最后不会报错，但不建议return 值</span></span><br><span class="line"><span class="comment">3、函数体中仅有一句话，则可以省略begin end</span></span><br><span class="line"><span class="comment">4、使用 delimiter 语句设置结束标记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、调用语法</span></span><br><span class="line"><span class="comment">select 函数名（参数列表）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、查看函数</span></span><br><span class="line"><span class="comment">show create function 函数名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、删除函数</span></span><br><span class="line"><span class="comment">drop function 函数名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#返回公司的员工个数（无参返回）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> myf1() <span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> c <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>#定义变量</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> c#赋值</span><br><span class="line"><span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">#根据员工名返回他的工资（有参返回）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> myf2(cmpName <span class="type">varchar</span>(<span class="number">20</span>)) <span class="keyword">return</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@sal</span><span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">into</span> <span class="variable">@sal</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> empName;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">@sal</span>;</span><br><span class="line"><span class="keyword">end</span> $</span><br></pre></td></tr></table></figure><h3 id="2、流程控制图"><a href="#2、流程控制图" class="headerlink" title="2、流程控制图"></a><strong>2、流程控制图</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺序结构：程序从上往下依次执行</span></span><br><span class="line"><span class="comment">分支结构：程序从两条或多条路径中选择一条去执行</span></span><br><span class="line"><span class="comment">循环结构：程序在满足一定条件的基础上，重复执行一段代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">一、分支结构</span><br><span class="line"><span class="number">1</span>、 if 函数</span><br><span class="line">语法：if(条件，值<span class="number">1</span>，值<span class="number">2</span>)</span><br><span class="line">特点：可以用在任何位置</span><br><span class="line"><span class="number">2</span>、 <span class="keyword">case</span> 结构</span><br><span class="line">情况一：类似于switch</span><br><span class="line">    <span class="keyword">case</span> 表达式</span><br><span class="line">    <span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line">    <span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">    <span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br><span class="line"></span><br><span class="line">    情况二：类似于多重if</span><br><span class="line">    <span class="keyword">case</span> </span><br><span class="line">    <span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line">    <span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">    <span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br><span class="line"><span class="number">3</span>、 if 结构</span><br><span class="line">    if 情况<span class="number">1</span> <span class="keyword">then</span> 语句<span class="number">1</span>;</span><br><span class="line">    elseif 情况<span class="number">2</span> <span class="keyword">then</span> 语句<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">else</span> 语句n;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    </span><br><span class="line">二、循环结构</span><br><span class="line">语法：</span><br><span class="line">【标签：】WHILE 循环条件  DO</span><br><span class="line">        循环体</span><br><span class="line">    <span class="keyword">END</span> WHILE 【标签】;</span><br><span class="line">    </span><br><span class="line">特点：</span><br><span class="line">    只能放在<span class="keyword">BEGIN</span> <span class="keyword">END</span>里面</span><br><span class="line">    如果要搭配leave跳转语句，需要使用标签，否则可以不用标签</span><br><span class="line">    leave类似于java中的break语句，跳出所在循环！！！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Day4</title>
      <link href="/2021/03/18/mysqlDay4/"/>
      <url>/2021/03/18/mysqlDay4/</url>
      
        <content type="html"><![CDATA[<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a><strong>Day4</strong></h1><h3 id="1、DML语言"><a href="#1、DML语言" class="headerlink" title="1、DML语言"></a><strong>1、DML语言</strong></h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">方式一：（支持插入多行，子查询）</span></span><br><span class="line"><span class="comment">insert into 表名(字段名，...)</span></span><br><span class="line"><span class="comment">values(值1，...), (值1，...), ......;</span></span><br><span class="line"><span class="comment">方式二：（不支持插入多行，不支持子查询）</span></span><br><span class="line"><span class="comment">insert into 表名</span></span><br><span class="line"><span class="comment">set 列名=值, 列名=值, ......;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">    1、字段类型和值类型一致或兼容，而且一一对应</span></span><br><span class="line"><span class="comment">    2、可以为空的字段，可以不用插入值，或用null填充</span></span><br><span class="line"><span class="comment">    3、不可以为空的字段，必须插入值</span></span><br><span class="line"><span class="comment">    4、字段个数和值的个数必须一致</span></span><br><span class="line"><span class="comment">    5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#方式一：多行</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> beauty(id, name, sex, borndate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">13</span>, <span class="string">&#x27;唐艺昕&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1990-4-3&#x27;</span>), (<span class="number">14</span>, <span class="string">&#x27;刘亦菲&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1987-4-3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#方式一：子查询（会把结果插入对应的字段中）</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> beauty(id, name, phone)</span><br><span class="line"><span class="keyword">select</span> <span class="number">26</span>, <span class="string">&#x27;宋茜&#x27;</span>, <span class="string">&#x27;88888888888&#x27;</span></span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> beauty</span><br><span class="line"><span class="keyword">set</span> id<span class="operator">=</span><span class="number">13</span>, name<span class="operator">=</span><span class="string">&#x27;唐嫣&#x27;</span>, sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>, borndate<span class="operator">=</span><span class="string">&#x27;1998-9-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修改单表语法：</span></span><br><span class="line"><span class="comment">update 表名 </span></span><br><span class="line"><span class="comment">set 字段=新值,字段=新值</span></span><br><span class="line"><span class="comment">【where 条件】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修改多表语法：</span></span><br><span class="line"><span class="comment">update 表1 别名1,表2 别名2</span></span><br><span class="line"><span class="comment">set 字段=新值，字段=新值</span></span><br><span class="line"><span class="comment">where 连接条件</span></span><br><span class="line"><span class="comment">and 筛选条件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#修改beauty表中姓唐的女神的电话为<span class="number">88888888888</span>, </span><br><span class="line">update beauty</span><br><span class="line"><span class="keyword">set</span> phone<span class="operator">=</span><span class="string">&#x27;88888888888&#x27;</span></span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;唐%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#修改张无忌女朋友的手机号为<span class="number">123</span></span><br><span class="line">update boys bo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> beauty b</span><br><span class="line"><span class="keyword">on</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line"><span class="keyword">where</span> bo.boyName<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单表的删除：</span></span><br><span class="line"><span class="comment">delete from 表名 【where 筛选条件】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多表的删除：</span></span><br><span class="line"><span class="comment">delete 别名1，别名2</span></span><br><span class="line"><span class="comment">from 表1 别名1，表2 别名2</span></span><br><span class="line"><span class="comment">where 连接条件</span></span><br><span class="line"><span class="comment">and 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">truncate语句：（又称清空，一次删除整个表，不能加where条件）</span></span><br><span class="line"><span class="comment">truncate table 表名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">区别：</span></span><br><span class="line"><span class="comment">1.truncate不能加where条件，而delete可以加where条件</span></span><br><span class="line"><span class="comment">2.truncate的效率高一丢丢</span></span><br><span class="line"><span class="comment">3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</span></span><br><span class="line"><span class="comment">4.truncate删除不能回滚，delete删除可以回滚</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#删除手机号以<span class="number">9</span>结尾的女神信息</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> beauty <span class="keyword">where</span> phone <span class="keyword">like</span> <span class="string">&#x27;%9&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除张无忌女朋友的信息</span><br><span class="line"><span class="keyword">delete</span> b</span><br><span class="line"><span class="keyword">from</span> beauty b</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boys bo</span><br><span class="line"><span class="keyword">on</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> bo.boyName <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除黄晓明的信息和他女朋友的信息</span><br><span class="line"><span class="keyword">delete</span> b, bo</span><br><span class="line"><span class="keyword">from</span> beauty b</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> boys bo</span><br><span class="line"><span class="keyword">on</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> bo.boyName <span class="operator">=</span> <span class="string">&#x27;黄晓明&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2、DDL语言"><a href="#2、DDL语言" class="headerlink" title="2、DDL语言"></a><strong>2、DDL语言</strong></h3><h4 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#库的管理</span><br><span class="line">    一、创建库</span><br><span class="line">    <span class="keyword">create</span> database (if <span class="keyword">not</span> <span class="keyword">exists</span>) 库名;</span><br><span class="line">    二、删除库</span><br><span class="line">    <span class="keyword">drop</span> database (if <span class="keyword">exists</span>) 库名;</span><br><span class="line">    三、库的修改</span><br><span class="line">    <span class="keyword">alter</span> database 旧库名 <span class="keyword">to</span> 新库名;</span><br></pre></td></tr></table></figure><h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#表的管理</span><br><span class="line">一、表的创建</span><br><span class="line">        <span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">            列名 列的类型 【(长度)约束】,</span><br><span class="line">            列名 列的类型 【(长度)约束】,</span><br><span class="line">            列名 列的类型 【(长度)约束】,</span><br><span class="line">            ...</span><br><span class="line">        );</span><br><span class="line">        例如：</span><br><span class="line">        <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">            stuId <span class="type">INT</span>,</span><br><span class="line">            stuName <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">            gender <span class="type">CHAR</span>,</span><br><span class="line">            bornDate DATETIME</span><br><span class="line">        );</span><br><span class="line">二、表的修改</span><br><span class="line"><span class="number">1</span>、修改列名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 【<span class="keyword">column</span>】 旧列名 新列名 类型;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book change <span class="keyword">column</span> publishdate pubdate datetime;</span><br><span class="line"><span class="number">2</span>、修改列的类型或约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify <span class="keyword">column</span> 列名 类型;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book modify <span class="keyword">column</span> pubdate <span class="type">timestamp</span>;</span><br><span class="line"><span class="number">3</span>、添加新列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author <span class="keyword">add</span> <span class="keyword">column</span> annual <span class="keyword">double</span>;</span><br><span class="line"><span class="number">4</span>、删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名 类型;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author <span class="keyword">drop</span> <span class="keyword">column</span> annual <span class="keyword">double</span>;</span><br><span class="line"><span class="number">5</span>、修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename <span class="keyword">to</span> 新表名;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> author rename <span class="keyword">to</span> zuozhe;</span><br><span class="line">三、表的删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 【if <span class="keyword">exists</span>】 表名;</span><br><span class="line">四、表的复制</span><br><span class="line"><span class="number">1</span>、只复制表的结构，不复制数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 被复制表名;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy_author <span class="keyword">like</span> author;</span><br><span class="line"><span class="number">2</span>、复制表的结构 <span class="operator">+</span> 全部数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 被复制表名;</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> copy_author <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> author;</span><br><span class="line"><span class="number">3</span>、复制表的结构 <span class="operator">+</span> 部分数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名</span><br><span class="line"><span class="keyword">select</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">from</span> 被复制表名</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】 ;</span><br><span class="line"><span class="number">4</span>、只复制部分结构</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名</span><br><span class="line"><span class="keyword">select</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">from</span> 被复制表名</span><br><span class="line"><span class="keyword">where</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、整数</span><br><span class="line">特点：</span><br><span class="line">a.默认是有符号，无符号需添加unsigned关键字</span><br><span class="line">b.若插入的数值超出范围，会报<span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span>异常， 并且插入临界值</span><br><span class="line">c.如果不设置长度，会有默认长度，长度代表了显示的最大宽度，如果不够会用<span class="number">0</span>在左边填充，但必须搭配zerofill使用</span><br><span class="line"><span class="number">2</span>、小数</span><br><span class="line">分类：</span><br><span class="line">a.浮点型</span><br><span class="line"><span class="type">float</span>(M, D)</span><br><span class="line"><span class="keyword">double</span>(M, D)</span><br><span class="line">b.定点型</span><br><span class="line"><span class="type">dec</span>(M, D)</span><br><span class="line"><span class="type">decimal</span>(M, D)</span><br><span class="line">特点：</span><br><span class="line">M：整数部位长度<span class="operator">+</span>小数部位长度</span><br><span class="line">D：小数部位长度</span><br><span class="line">注意：M和D都可以省略，如果是<span class="type">decimal</span>，则M默认是<span class="number">10</span>， D默认是<span class="number">0</span></span><br><span class="line">    如果是<span class="type">float</span>和<span class="keyword">double</span>，则会根据插入的数值精度来决定精度</span><br><span class="line">总结：定点型的精度较高，如果要求插入数值的精度较高如货币运算等可以考虑使用</span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、较短的文本（M为字符数）</span><br><span class="line"><span class="type">char</span>(M)       固定长度的字符    空间耗费大，但效率高</span><br><span class="line"><span class="type">varchar</span>(M)  可变长度的字符    空间耗费小，但效率低</span><br><span class="line"><span class="number">2</span>、较长的文本</span><br><span class="line">text</span><br><span class="line"><span class="type">blob</span></span><br><span class="line"></span><br><span class="line">#<span class="comment">--------------------------------------------------------------------</span></span><br><span class="line">enum类型：</span><br><span class="line"># 又称枚举类型，要求插入的值必须属于列表中指定的值之一</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_char(</span><br><span class="line">c enum(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_char <span class="keyword">values</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_char <span class="keyword">values</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_char <span class="keyword">values</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_char <span class="keyword">values</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_char <span class="keyword">values</span>(<span class="string">&#x27;m&#x27;</span>);  #报错，因为不包含在枚举列表中</span><br><span class="line"></span><br><span class="line">#<span class="comment">---------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">set</span>类型</span><br><span class="line"># 和enum类型类似，区别在于<span class="keyword">set</span>类型一次可以选取多个成员，而enum只能选取一个成员</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_set(</span><br><span class="line">s <span class="keyword">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_set <span class="keyword">values</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_set <span class="keyword">values</span>(<span class="string">&#x27;a, b&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_set <span class="keyword">values</span>(<span class="string">&#x27;A, b, c&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h4><h5 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确性和可靠性</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常见六大约束：</span></span><br><span class="line"><span class="comment">    NOT NULL保证字段不为空</span></span><br><span class="line"><span class="comment">    DEFAULT保证字段有默认值</span></span><br><span class="line"><span class="comment">    UNIQUE唯一，保证字段值具有唯一性，可以为空</span></span><br><span class="line"><span class="comment">    CHECK检查约束（mysql不支持）</span></span><br><span class="line"><span class="comment">    PRIMARY KEY     主键，保证字段值具有唯一性，不能为空</span></span><br><span class="line"><span class="comment">    FOREIGN KEY 外键，用于限制两个表的关系，保证该字段的值必须来自于主表的关联列的值，在从表中添加外键约束，用于引用主表中某列的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#创建表时添加约束</span><br><span class="line">一、添加列级约束</span><br><span class="line"><span class="comment">/*语法：</span></span><br><span class="line"><span class="comment">直接在字段名和类型后面追加约束类型即可</span></span><br><span class="line"><span class="comment">只支持：默认、非空、主键、唯一</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuinfo(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,#主键</span><br><span class="line">    stuName <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,#非空</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">check</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),#检查</span><br><span class="line">    seat <span class="type">int</span> <span class="keyword">unique</span>,#唯一</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span>,#默认约束</span><br><span class="line">    majorId <span class="type">int</span> <span class="keyword">references</span>(id)#外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">二、添加表级约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：在各个字段的最下面</span></span><br><span class="line"><span class="comment">【constraint 约束名】 约束类型(字段名);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuinfo(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">    stuname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    seat <span class="type">int</span>,</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    majorid <span class="type">int</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constraint</span> pk <span class="keyword">primary</span> key(id),#主键</span><br><span class="line">    <span class="keyword">constraint</span> uq <span class="keyword">unique</span>(seat),#唯一键</span><br><span class="line">    <span class="keyword">constraint</span> ck <span class="keyword">check</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),#检查</span><br><span class="line">    <span class="keyword">constraint</span> fk_stuinfo_major <span class="keyword">foreign</span> key(majorid) <span class="keyword">references</span> major(id) #外键</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">三、通用写法</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> stuinfo(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    stuName <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">    seat <span class="type">int</span> <span class="keyword">unique</span> <span class="number">18</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span>,</span><br><span class="line">    majorId <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_stuinfo_major <span class="keyword">foreign</span> key(majorid) <span class="keyword">references</span> major(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主键和唯一的对比：</span></span><br><span class="line"><span class="comment">唯一性是否允许为空一个表中可以有多少个是否允许组合</span></span><br><span class="line"><span class="comment">主键√×一个允许（不推荐）</span></span><br><span class="line"><span class="comment">唯一√√多个允许（不推荐）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">外键：</span></span><br><span class="line"><span class="comment">1、要求在从表设置外键关系</span></span><br><span class="line"><span class="comment">2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</span></span><br><span class="line"><span class="comment">3、主表的关联列必须是一个key（一般是主键或唯一）</span></span><br><span class="line"><span class="comment">4、插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、添加列级约束</span></span><br><span class="line"><span class="comment">alter table 表名 modify column 字段名 字段类型 新约束;</span></span><br><span class="line"><span class="comment">2、添加表级约束</span></span><br><span class="line"><span class="comment">alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> stuname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> age <span class="type">int</span> <span class="keyword">default</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">add</span> <span class="keyword">primary</span> key(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> seat <span class="type">int</span> <span class="keyword">unique</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">add</span> <span class="keyword">unique</span>(seat);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">add</span> <span class="keyword">foreign</span> key(majorid) <span class="keyword">references</span> major(id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> stuname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo modify <span class="keyword">column</span> age <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">drop</span> index seat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stuinfo <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_stuinfo_major;</span><br></pre></td></tr></table></figure><h4 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">又称自增长列，可以不用手动插入值，系统提供默认的序列值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、标识列不一定要和主键搭配，但要求是一个key</span></span><br><span class="line"><span class="comment">2、一个表最多可以有一个标识列</span></span><br><span class="line"><span class="comment">3、标识列的类型只能是数值型</span></span><br><span class="line"><span class="comment">4、标识列可以通过  set auto_increment_increment=3; 设置步长，可以手动插入值，设置起始值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">一、创建表时设置标识列</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_identity(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">#会自动创建<span class="number">1</span><span class="number">-20</span>的id</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_identity(id, name) <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="string">&#x27;john&#x27;</span>);</span><br><span class="line"></span><br><span class="line">二、修改表时设置标识列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_identity modify <span class="keyword">column</span> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment;</span><br><span class="line"></span><br><span class="line">三、修改表时删除标识列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_identity modify <span class="keyword">column</span> id <span class="type">int</span>;</span><br></pre></td></tr></table></figure><h3 id="3、TCL语言"><a href="#3、TCL语言" class="headerlink" title="3、TCL语言"></a><strong>3、TCL语言</strong></h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">transaction control language：事务控制语言</span></span><br><span class="line"><span class="comment">事务：</span></span><br><span class="line"><span class="comment">一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事务的特性：</span></span><br><span class="line"><span class="comment">原子性：一个事务不可再分割，要么都执行要么都不执行</span></span><br><span class="line"><span class="comment">一致性：一个事务执行会使数据从一个一致状态切换到另外一个一直状态</span></span><br><span class="line"><span class="comment">隔离性：一个事务的执行不受其他事务的干扰</span></span><br><span class="line"><span class="comment">持久性：一个事务一旦提交，则会永久的改变数据库的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的创建：</span></span><br><span class="line"><span class="comment">隐式事务：事务没有明显的开启或结束的标记，比如insert、update、delete语句</span></span><br><span class="line"><span class="comment">显示事务：事务具有明显的开启或结束的标记，前提：必须先设置自动提交功能为禁用</span></span><br><span class="line"><span class="comment">set autocommit=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">步骤1：开启事务</span></span><br><span class="line"><span class="comment">set autommit=0;</span></span><br><span class="line"><span class="comment">start transaction;（可选）</span></span><br><span class="line"><span class="comment">步骤2：编写事务中的sql语句（select、insert、update、delete）</span></span><br><span class="line"><span class="comment">语句1;</span></span><br><span class="line"><span class="comment">语句2;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">步骤3：结束事务</span></span><br><span class="line"><span class="comment">commit; （提交事务）</span></span><br><span class="line"><span class="comment">rollback; （回滚事务）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">update account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">500</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line">update account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1500</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;赵敏&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事务并发问题如何发生？</span></span><br><span class="line"><span class="comment">当多个事务同时操作同一个数据库的相同数据时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的并发问题有哪些？</span></span><br><span class="line"><span class="comment">脏读：一个事务读取到了另外一个事务未提交的数据</span></span><br><span class="line"><span class="comment">不可重复读：同一个事务中，多次读取到的数据不一致</span></span><br><span class="line"><span class="comment">幻读：一个事务读取数据时，另一个事务进行更新，导致第一个事务读取到了没有更新的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何避免事务的并发问题？</span></span><br><span class="line"><span class="comment">通过设置事务的隔离级别</span></span><br><span class="line"><span class="comment">1、read uncommitted</span></span><br><span class="line"><span class="comment">2、read committed 可以避免脏读</span></span><br><span class="line"><span class="comment">3、repeatable read 可以避免脏读、不可重复读和一部分幻读</span></span><br><span class="line"><span class="comment">4、serializable 可以避免脏读、不可重复读和幻读</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设置隔离级别：</span></span><br><span class="line"><span class="comment">set session|global  transaction isolation level 隔离级别名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">查看隔离级别：</span></span><br><span class="line"><span class="comment">select @@tx_isolation;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、视图"><a href="#4、视图" class="headerlink" title="4、视图"></a><strong>4、视图</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#视图</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：</span></span><br><span class="line"><span class="comment">虚拟表，和普通表一样使用</span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1、sql语句提高重用性，效率高</span></span><br><span class="line"><span class="comment">2、和表实现了分离，提高了安全性</span></span><br><span class="line"><span class="comment">视图和表的区别：</span></span><br><span class="line"><span class="comment">  使用方式   占用物理空间语法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">视图 完全相同不占用，仅仅保存的是sql逻辑    create view</span></span><br><span class="line"><span class="comment">表  完全相同 占用  create table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">一、视图的创建</span><br><span class="line">#查询姓名中包含a字符的员工名、部门名和工种信息</span><br><span class="line"><span class="number">1</span>、创建</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> last_name, department_name, job_title</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">join</span> departments d <span class="keyword">on</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">join</span> jobs j <span class="keyword">on</span> e.job_id <span class="operator">=</span> j.job_id;</span><br><span class="line"><span class="number">2</span>、使用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> myview <span class="keyword">where</span> last_name <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查询平均工资最低的部门名和工资</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myv2</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) ag</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myv3</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> myv2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ag</span><br><span class="line">limit <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span>, m.ag</span><br><span class="line"><span class="keyword">from</span> myv3 m</span><br><span class="line"><span class="keyword">join</span> departments d</span><br><span class="line"><span class="keyword">on</span> m.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">二、视图的修改</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方式一：</span></span><br><span class="line"><span class="comment">        create or replace view 视图名</span></span><br><span class="line"><span class="comment">        as</span></span><br><span class="line"><span class="comment">        查询语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> myv3</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary), job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方式二：</span></span><br><span class="line"><span class="comment">        alter view 视图名</span></span><br><span class="line"><span class="comment">        as</span></span><br><span class="line"><span class="comment">        查询语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> myv3</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line">三、视图的删除</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">drop view 视图名, 视图名, ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> myv1, myv2, myv3;</span><br><span class="line"></span><br><span class="line">四、视图的查看</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">show create view 视图名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">五、视图的更新（更改数据）</span><br><span class="line"><span class="number">1</span>、插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> myv1 <span class="keyword">values</span>(<span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;zf@qq.com&#x27;</span>);</span><br><span class="line"><span class="number">2</span>、修改</span><br><span class="line">update myv1 <span class="keyword">set</span> last_name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span> <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;张飞&#x27;</span>;</span><br><span class="line"><span class="number">3</span>、删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> myv1 <span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5、变量"><a href="#5、变量" class="headerlink" title="5、变量"></a><strong>5、变量</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">系统变量：</span></span><br><span class="line"><span class="comment">全局变量：服务器每次启动将为所有的全局变量赋初值，针对于所有的会话有效，但不能    跨重启</span></span><br><span class="line"><span class="comment">会话变量：仅仅针对当前会话有效</span></span><br><span class="line"><span class="comment">自定义变量：</span></span><br><span class="line"><span class="comment">用户变量：针对于当前会话有效，应用在任何地方，即begin end里面或begin end外面</span></span><br><span class="line"><span class="comment">局部变量：仅仅在它的begin end中有效，应用在begin end中的第一句话</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">一、系统变量</span><br><span class="line">说明：由系统提供，属于服务器层面</span><br><span class="line"><span class="number">1</span>、查询所有的系统变量</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span><span class="operator">|</span>【session】 variables;</span><br><span class="line"><span class="number">2</span>、查看满足条件的部分系统变量</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span><span class="operator">|</span>【session】 variables <span class="keyword">like</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"><span class="number">3</span>、查看指定的某个系统变量的值</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span><span class="operator">|</span>【session】.系统变量名;</span><br><span class="line"><span class="number">4</span>、为某个系统变量赋值</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span><span class="operator">|</span>【session】 系统变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span><span class="operator">|</span>【session】.系统变量名<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、自定义变量</span><br><span class="line"><span class="number">1</span>、说明：用户自定义变量</span><br><span class="line">    使用步骤：</span><br><span class="line">    声明<span class="operator">-</span><span class="operator">&gt;</span>赋值<span class="operator">-</span><span class="operator">&gt;</span>使用</span><br><span class="line">    <span class="number">1</span>、声明并初始化</span><br><span class="line">    <span class="keyword">set</span> @用户变量名<span class="operator">=</span>值; </span><br><span class="line">    或</span><br><span class="line">    <span class="keyword">set</span>@用户变量名:<span class="operator">=</span>值; </span><br><span class="line">    或</span><br><span class="line">    <span class="keyword">select</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、赋值（更新用户变量的值）</span><br><span class="line">    方式一：</span><br><span class="line">    <span class="keyword">set</span> @用户变量名<span class="operator">=</span>值; </span><br><span class="line">    或</span><br><span class="line">    <span class="keyword">set</span>@用户变量名:<span class="operator">=</span>值; </span><br><span class="line">    或</span><br><span class="line">    <span class="keyword">select</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line">    方式二：</span><br><span class="line">    <span class="keyword">select</span> 字段 <span class="keyword">into</span> 变量名</span><br><span class="line">    <span class="keyword">from</span> 表;</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、使用</span><br><span class="line">    <span class="keyword">select</span> @用户变量名;</span><br><span class="line"></span><br><span class="line">    例如：</span><br><span class="line">        <span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="string">&#x27;john&#x27;</span>;</span><br><span class="line">        <span class="keyword">set</span> <span class="variable">@name</span><span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">        <span class="keyword">set</span> <span class="variable">@count</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> <span class="variable">@count</span></span><br><span class="line">        <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">select</span> <span class="variable">@count</span>;</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>、局部变量：</span><br><span class="line"><span class="number">1</span>、声明</span><br><span class="line"><span class="keyword">declare</span> 变量名 类型;</span><br><span class="line"><span class="keyword">declare</span> 变量名 类型 <span class="keyword">default</span> 值;</span><br><span class="line"><span class="number">2</span>、赋值</span><br><span class="line">方式一：通过 <span class="keyword">set</span> 或 <span class="keyword">select</span></span><br><span class="line"><span class="keyword">set</span> 局部变量名<span class="operator">=</span>值;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">set</span> 局部变量名:<span class="operator">=</span>值;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> @局部变量名:<span class="operator">=</span>值;</span><br><span class="line">方式二：通过 <span class="keyword">select</span> <span class="keyword">into</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量名</span><br><span class="line"><span class="keyword">from</span> 表;</span><br><span class="line"><span class="number">3</span>、使用</span><br><span class="line"><span class="keyword">select</span> 局部变量名;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">declare</span> m <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">declare</span> n <span class="type">int</span> <span class="keyword">default</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">declare</span> sum <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> sum<span class="operator">=</span>m<span class="operator">+</span>n;</span><br><span class="line"><span class="keyword">select</span> sum;</span><br></pre></td></tr></table></figure><h3 id="6、存储过程和函数"><a href="#6、存储过程和函数" class="headerlink" title="6、存储过程和函数"></a><strong>6、存储过程和函数</strong></h3><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">含义：一组预先编译好的<span class="keyword">SQL</span>语句的集合，理解成批处理语句</span><br><span class="line"><span class="number">1</span>、提高代码的重用性</span><br><span class="line"><span class="number">2</span>、简化过程</span><br><span class="line"><span class="number">3</span>、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</span><br><span class="line"></span><br><span class="line">一、创建语法</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>、参数列表包含三部分</span><br><span class="line">    参数模式 参数名 参数类型</span><br><span class="line"></span><br><span class="line">    例如： <span class="keyword">in</span> stuname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    参数模式：</span><br><span class="line">        <span class="keyword">in</span>：该参数可以作为输入，需要调入方传入值</span><br><span class="line">        <span class="keyword">out</span>：该参数可以作为输出，该参数可以作为返回值</span><br><span class="line">        <span class="keyword">inout</span>：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、如果存储过程体仅仅只有一句话， <span class="keyword">begin</span> <span class="keyword">end</span> 可以省略</span><br><span class="line">存储过程体中的每条<span class="keyword">SQL</span>语句的结尾要求必须加分号</span><br><span class="line">存储过程的结尾可以使用 delimiter 重新设置</span><br><span class="line">语法：</span><br><span class="line">delimiter 结束标记</span><br><span class="line">例如：</span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">二、调用语法</span><br><span class="line"><span class="keyword">call</span> 存储过程名（实参列表）;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三、参数前面的符号的意思</span><br><span class="line"><span class="keyword">in</span>:该参数只能作为输入 （该参数不能做返回值）</span><br><span class="line"><span class="keyword">out</span>：该参数只能作为输出（该参数只能做返回值）</span><br><span class="line"><span class="keyword">inout</span>：既能做输入又能做输出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Day3</title>
      <link href="/2021/03/18/mysqlDay3/"/>
      <url>/2021/03/18/mysqlDay3/</url>
      
        <content type="html"><![CDATA[<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h3 id="1、多表连接查询"><a href="#1、多表连接查询" class="headerlink" title="1、多表连接查询"></a><strong>1、多表连接查询</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">按功能分类：</span></span><br><span class="line"><span class="comment">内连接：</span></span><br><span class="line"><span class="comment">等值连接</span></span><br><span class="line"><span class="comment">非等值连接</span></span><br><span class="line"><span class="comment">自连接</span></span><br><span class="line"><span class="comment">外连接：</span></span><br><span class="line"><span class="comment">左外连接</span></span><br><span class="line"><span class="comment">右外连接</span></span><br><span class="line"><span class="comment">全外连接</span></span><br><span class="line"><span class="comment">交叉连接</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="内连接（sql92语法）"><a href="#内连接（sql92语法）" class="headerlink" title="内连接（sql92语法）"></a>内连接（sql92语法）</h4><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#等值连接</span><br><span class="line">#查询员工名和对应的部门名</span><br><span class="line"><span class="keyword">select</span> last_name, department_name</span><br><span class="line"><span class="keyword">from</span> employees, departments</span><br><span class="line"><span class="keyword">where</span> employees.`department_id` <span class="operator">=</span> departments.`department_id`;</span><br><span class="line"></span><br><span class="line">#为表起别名：提高语句的简洁度，区分重名字段（注意：起了别名后不能用原来的表名）</span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line"><span class="keyword">select</span> last_name, e.job_id, job_title</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> e, jobs <span class="keyword">as</span> j</span><br><span class="line"><span class="keyword">where</span> e.job_id <span class="operator">=</span> j.job_id;</span><br><span class="line"></span><br><span class="line">#查询有奖金的员工名、部门名</span><br><span class="line"><span class="keyword">select</span> last_name, department_name, commission_pct</span><br><span class="line"><span class="keyword">from</span> employees e, departments d</span><br><span class="line"><span class="keyword">where</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">and</span> e.commission_pct <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">#查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line"><span class="keyword">select</span> department_name, city</span><br><span class="line"><span class="keyword">from</span> departments d, locations l</span><br><span class="line"><span class="keyword">where</span> d.location_id <span class="operator">=</span> l.location_id <span class="keyword">and</span> city <span class="keyword">like</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查询每个城市的部门个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) 个数, city</span><br><span class="line"><span class="keyword">from</span> departments d, locations l</span><br><span class="line"><span class="keyword">where</span> d.location_id <span class="operator">=</span> l.location_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> city;</span><br><span class="line"></span><br><span class="line">#查询每个工种的工种名和员工的个数，并且按员工个数降序</span><br><span class="line"><span class="keyword">select</span> job_title, <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> employees e, jobs j</span><br><span class="line"><span class="keyword">where</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job_title</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#三表连接</span><br><span class="line">#查询员工名、部门名、所在城市</span><br><span class="line"><span class="keyword">select</span> last_name, department_name, city</span><br><span class="line"><span class="keyword">from</span> employees e, departments d, locations l</span><br><span class="line"><span class="keyword">where</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">and</span> d.location_id <span class="operator">=</span> l.location_id;</span><br></pre></td></tr></table></figure><h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工的工资和工资级别</span><br><span class="line"><span class="keyword">select</span> salary, grade_level</span><br><span class="line"><span class="keyword">from</span> employees e, job_grades j</span><br><span class="line"><span class="keyword">where</span> salary <span class="keyword">between</span> j.lowest_sal <span class="keyword">and</span> j.highest_sal;</span><br></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工名和其对应的上级的名称（查员工名要访问一次表，查领导名要再访问一次同一张表）</span><br><span class="line"><span class="keyword">select</span> e.employee_id, e.last_name, m.manager_id, m.last_name</span><br><span class="line"><span class="keyword">from</span> employees e, employees m</span><br><span class="line"><span class="keyword">where</span> m.manager_id <span class="operator">=</span> e.employee_id;</span><br></pre></td></tr></table></figure><h3 id="2、sql99语法"><a href="#2、sql99语法" class="headerlink" title="2、sql99语法"></a><strong>2、sql99语法</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">select 查询列表</span></span><br><span class="line"><span class="comment">from 表1 别名</span></span><br><span class="line"><span class="comment">【inner|left outer|right outer|cross】 表2 别名 on 连接条件2</span></span><br><span class="line"><span class="comment">【inner|left outer|right outer|cross】 表3 别名 on 连接条件3</span></span><br><span class="line"><span class="comment">【where 筛选条件】</span></span><br><span class="line"><span class="comment">【group by 分组】</span></span><br><span class="line"><span class="comment">【having 分组后的筛选条件】</span></span><br><span class="line"><span class="comment">【order by 排序列表】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">内连接：inner</span></span><br><span class="line"><span class="comment">外连接：</span></span><br><span class="line"><span class="comment">左外连接：left 【outer】</span></span><br><span class="line"><span class="comment">右外连接：right 【outer】</span></span><br><span class="line"><span class="comment">全外连接：full 【outer】</span></span><br><span class="line"><span class="comment">交叉连接：cross</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select 查询列表</span></span><br><span class="line"><span class="comment">from 表1 别名</span></span><br><span class="line"><span class="comment">inner join 表2 别名</span></span><br><span class="line"><span class="comment">on 连接条件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">等值</span></span><br><span class="line"><span class="comment">非等值</span></span><br><span class="line"><span class="comment">自连接</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="等值连接-1"><a href="#等值连接-1" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工名、部门名</span><br><span class="line"><span class="keyword">select</span> last_name, department_name</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> departments d</span><br><span class="line"><span class="keyword">on</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#查询名字中包含e的员工名和工种名</span><br><span class="line"><span class="keyword">select</span> last_name, job_title</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> jobs j</span><br><span class="line"><span class="keyword">on</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">where</span> e.last_name <span class="keyword">like</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查询部门个数 <span class="operator">&gt;</span> <span class="number">3</span> 的城市名和部门个数</span><br><span class="line"><span class="keyword">select</span> city, <span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">from</span> departments d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> locations l</span><br><span class="line"><span class="keyword">on</span> l.location_id <span class="operator">=</span> d.location_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> city</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#查询员工名、部门名、工种名，并按部门名降序</span><br><span class="line"><span class="keyword">select</span> last_name, department_name, job_title</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> departments d <span class="keyword">on</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> jobs j <span class="keyword">on</span> j.job_id <span class="operator">=</span> e.job_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> department_name <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h5 id="非等值连接-1"><a href="#非等值连接-1" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询员工的工资级别</span><br><span class="line"><span class="keyword">select</span> salary, grade_level</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">join</span> job_grades g</span><br><span class="line"><span class="keyword">on</span> e.salary <span class="keyword">between</span> g.lowest_sal <span class="keyword">and</span> g.highest_sal;</span><br><span class="line"></span><br><span class="line">#查询每个工资级别的个数<span class="operator">&gt;</span><span class="number">20</span>的个数，并且按工资级别降序</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), grade_level</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">join</span> job_grades g</span><br><span class="line"><span class="keyword">on</span> e.salary <span class="keyword">between</span> g.lowest_sal <span class="keyword">and</span> g.highest_sal</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> grade_level</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> grade_level <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h5 id="自连接-1"><a href="#自连接-1" class="headerlink" title="自连接"></a>自连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#自连接</span><br><span class="line">#查询员工的名字、上级的名字</span><br><span class="line"><span class="keyword">select</span> e.last_name, m.last_name</span><br><span class="line"><span class="keyword">from</span> employees e</span><br><span class="line"><span class="keyword">join</span> employees m</span><br><span class="line"><span class="keyword">on</span> e.manager_id <span class="operator">=</span> m.employee_id;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">应用场景：用于查询一个表中有，另一个表中没有的记录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1、外连接的查询结果为主表中的所有记录</span></span><br><span class="line"><span class="comment">如果从表中有和它匹配的，则显示匹配的值</span></span><br><span class="line"><span class="comment">如果从表中没有和它匹配的，则显示null</span></span><br><span class="line"><span class="comment">外连接查询结果 = 内连接结果 + 主表中有而从表中没有的记录</span></span><br><span class="line"><span class="comment">2、左外连接，left join左边的是主表</span></span><br><span class="line"><span class="comment">   右外连接，right join右边的是主表</span></span><br><span class="line"><span class="comment">3、左外和右外交换两个表的顺序，可以实现同样的效果</span></span><br><span class="line"><span class="comment">4、全外连接 = 内连接的结果 + 表1中有但表2中没有的 + 表2中有但表1中没有的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#引入：查询男朋友不在男神表的女神名</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> beauty;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> boys;</span><br><span class="line">#左外</span><br><span class="line"><span class="keyword">select</span> b.name, bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> beauty b</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> boys bo</span><br><span class="line"><span class="keyword">on</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> bo.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line">#右外，与上结果同</span><br><span class="line"><span class="keyword">select</span> b.name, bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> boys bo</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> beauty b</span><br><span class="line"><span class="keyword">on</span> b.boyfriend_id <span class="operator">=</span> bo.id</span><br><span class="line"><span class="keyword">where</span> bo.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line">#交叉连接(笛卡尔乘积)</span><br><span class="line"><span class="keyword">select</span> b.<span class="operator">*</span>, bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> beauty b</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> boys bo;</span><br></pre></td></tr></table></figure><h3 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a><strong>3、子查询</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：</span></span><br><span class="line"><span class="comment">一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询，在外面的查询语句，称为主查询或外查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">按子查询出现的位置：</span></span><br><span class="line"><span class="comment">select后面：</span></span><br><span class="line"><span class="comment">仅支持标量子查询</span></span><br><span class="line"><span class="comment">from后面：</span></span><br><span class="line"><span class="comment">支持表子查询</span></span><br><span class="line"><span class="comment">where或having后面：</span></span><br><span class="line"><span class="comment">标量子查询（单行）</span></span><br><span class="line"><span class="comment">列子查询（多行）</span></span><br><span class="line"><span class="comment">行子查询</span></span><br><span class="line"><span class="comment">exists后面（相关子查询）</span></span><br><span class="line"><span class="comment">表子查询</span></span><br><span class="line"><span class="comment">按结果集的行列数不同：</span></span><br><span class="line"><span class="comment">标量子查询（结果集只有一行一列）</span></span><br><span class="line"><span class="comment">列子查询（结果集只有一列多行）</span></span><br><span class="line"><span class="comment">表子查询（结果集一般为多行多列）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="where或having后面"><a href="#where或having后面" class="headerlink" title="where或having后面"></a>where或having后面</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、where或having后面</span></span><br><span class="line"><span class="comment">1、标量子查询（单行子查询）</span></span><br><span class="line"><span class="comment">2、列子查询（多行子查询）</span></span><br><span class="line"><span class="comment">3、行子查询（多行多列）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">    1、子查询都放在小括号内</span></span><br><span class="line"><span class="comment">    2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧</span></span><br><span class="line"><span class="comment">    3、子查询优先于主查询执行，主查询使用了子查询的执行结果</span></span><br><span class="line"><span class="comment">    4、子查询根据查询结果的行数不同分为以下两类：</span></span><br><span class="line"><span class="comment">        ①单行子查询</span></span><br><span class="line"><span class="comment">            结果集只有一行</span></span><br><span class="line"><span class="comment">            一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;= </span></span><br><span class="line"><span class="comment">            非法使用子查询的情况：</span></span><br><span class="line"><span class="comment">            a、子查询的结果为一组值</span></span><br><span class="line"><span class="comment">            b、子查询的结果为空</span></span><br><span class="line"><span class="comment">        ② 多行子查询</span></span><br><span class="line"><span class="comment">            结果集有多行</span></span><br><span class="line"><span class="comment">            一般搭配多行操作符使用：any、all、in、not in</span></span><br><span class="line"><span class="comment">            in： 属于子查询结果中的任意一个就行</span></span><br><span class="line"><span class="comment">            any和all往往可以用其他查询代替 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">1</span>、标量子查询（单行子查询）<span class="comment">------------------------------------------------</span></span><br><span class="line">#①查询Abel的工资</span><br><span class="line"><span class="keyword">select</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">#查询员工的信息，满足 salary<span class="operator">&gt;</span>①结果</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#②返回job_id与<span class="number">141</span>号员工相同，salary比<span class="number">143</span>号员工多的员工姓名，job_id和工资</span><br><span class="line">#第一步：①查询<span class="number">141</span>号员工的job_id</span><br><span class="line"><span class="keyword">select</span> job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> <span class="number">141</span>;</span><br><span class="line">#第二步：②查询<span class="number">143</span>号员工的salary</span><br><span class="line"><span class="keyword">select</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> <span class="number">143</span>;</span><br><span class="line">#第三步：查询员工的姓名，job_id和工资，要求job_id<span class="operator">=</span>①并且salary<span class="operator">&gt;</span>②</span><br><span class="line"><span class="keyword">select</span> last_name, job_id, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">select</span> job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> <span class="number">141</span></span><br><span class="line">) <span class="keyword">and</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="operator">=</span> <span class="number">143</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查询最低工资大于<span class="number">50</span>号部门最低工资的部门id和其最低工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(salary), department_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">min</span>(salary) <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">    <span class="keyword">where</span> department_id <span class="operator">=</span> <span class="number">50</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>、列子查询（多行子查询）<span class="comment">------------------------------------------------</span></span><br><span class="line">#返回location_id是<span class="number">1400</span>或<span class="number">1700</span>的部门中的所有员工姓名</span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">    <span class="keyword">from</span> departments</span><br><span class="line">    <span class="keyword">where</span> location_id <span class="keyword">in</span>(<span class="number">1400</span>, <span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="operator">=</span><span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">    <span class="keyword">from</span> departments</span><br><span class="line">    <span class="keyword">where</span> location_id <span class="keyword">in</span>(<span class="number">1400</span>, <span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#返回location_id不是<span class="number">1400</span>或<span class="number">1700</span>的部门中的所有员工姓名</span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">    <span class="keyword">from</span> departments</span><br><span class="line">    <span class="keyword">where</span> location_id <span class="keyword">in</span>(<span class="number">1400</span>, <span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="operator">&lt;&gt;</span><span class="keyword">all</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id</span><br><span class="line">    <span class="keyword">from</span> departments</span><br><span class="line">    <span class="keyword">where</span> location_id <span class="keyword">in</span>(<span class="number">1400</span>, <span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回其他部门（意思是除去部门IT_PROG的）中比job_id为<span class="string">&#x27;IT_PROG&#x27;</span>工种任一工资低的员工的员工号、姓名、job_id以及salary</span><br><span class="line">#一、先查询job_id为<span class="string">&#x27;IT_PROG&#x27;</span>工种任一工资</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line">#二、查询员工号、姓名、job_id以及salary，salary <span class="operator">&lt;</span> (一)的任意一个</span><br><span class="line"><span class="keyword">select</span> last_name, employee_id, job_id, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="keyword">any</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">and</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> last_name, employee_id, job_id, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> (</span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">max</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">and</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#返回其他部门（意思是除去部门IT_PROG的）中比job_id为<span class="string">&#x27;IT_PROG&#x27;</span>工种所有工资低的员工的员工号、姓名、job_id以及salary</span><br><span class="line"><span class="keyword">select</span> last_name, employee_id, job_id, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="keyword">all</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">and</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> last_name, employee_id, job_id, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary <span class="operator">&lt;</span> (</span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">min</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line">) <span class="keyword">and</span> job_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">3</span>、行子查询（多行多列）<span class="comment">------------------------------------------------</span></span><br><span class="line">#查询员工编号最小并且工资最高的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> (employee_id, salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(employee_id), <span class="built_in">max</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="select后面"><a href="#select后面" class="headerlink" title="select后面"></a>select后面</h4><h4 id="from后面"><a href="#from后面" class="headerlink" title="from后面"></a>from后面</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询每个部门的平均工资的工资等级</span><br><span class="line">#(将子查询结果充当一张表，要求必须其别名)</span><br><span class="line"><span class="keyword">select</span> ag_dep.<span class="operator">*</span>, g.grade_level</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) ag, department_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id</span><br><span class="line">) ag_dep</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> job_grades g</span><br><span class="line"><span class="keyword">on</span> ag_dep.ag <span class="keyword">between</span> lowest_sal <span class="keyword">and</span> highest_sal;</span><br></pre></td></tr></table></figure><h4 id="exists后面"><a href="#exists后面" class="headerlink" title="exists后面"></a>exists后面</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#结果为<span class="number">0</span>或<span class="number">1</span>，判断是否存在</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> employee_id</span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">    <span class="keyword">where</span> salary<span class="operator">=</span><span class="number">300000</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查询有员工的部门名</span><br><span class="line"><span class="keyword">select</span> department_name</span><br><span class="line"><span class="keyword">from</span> departments d</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> employees e</span><br><span class="line">    <span class="keyword">where</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line">);</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> department_name</span><br><span class="line"><span class="keyword">from</span> departments d</span><br><span class="line"><span class="keyword">where</span> d.department_id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> department_id</span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查询没有女朋友的男神信息</span><br><span class="line">use girls;</span><br><span class="line"><span class="keyword">select</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> boys bo</span><br><span class="line"><span class="keyword">where</span> bo.`id` <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> boyfriend_id</span><br><span class="line">    <span class="keyword">from</span> beauty</span><br><span class="line">);</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">select</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> boys bo</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> boyfriend_id</span><br><span class="line">    <span class="keyword">from</span> beauty b</span><br><span class="line">    <span class="keyword">where</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4、分页查询"><a href="#4、分页查询" class="headerlink" title="4、分页查询"></a><strong>4、分页查询</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*语法：</span></span><br><span class="line"><span class="comment">select 字段|表达式,...</span></span><br><span class="line"><span class="comment">from 表</span></span><br><span class="line"><span class="comment">【where 条件】</span></span><br><span class="line"><span class="comment">【group by 分组字段】</span></span><br><span class="line"><span class="comment">【having 条件】</span></span><br><span class="line"><span class="comment">【order by 排序的字段】</span></span><br><span class="line"><span class="comment">limit 【offset起始的条目索引，】 size条目数;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1.起始条目索引从0开始</span></span><br><span class="line"><span class="comment">2.limit子句放在查询语句的最后</span></span><br><span class="line"><span class="comment">3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage</span></span><br><span class="line"><span class="comment">            假如:</span></span><br><span class="line"><span class="comment">            每页显示条目数sizePerPage</span></span><br><span class="line"><span class="comment">            要显示的页数 page</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">#查询前五条员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees limit <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">#查询第<span class="number">11</span>条到第<span class="number">25</span>条</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees limit <span class="number">10</span>, <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">#有奖金的员工信息，并且工资较高的前<span class="number">10</span>名显示出来</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> commission_pct <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="5、联合查询"><a href="#5、联合查询" class="headerlink" title="5、联合查询"></a><strong>5、联合查询</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】</span></span><br><span class="line"><span class="comment">select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】</span></span><br><span class="line"><span class="comment">select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment">select 字段|常量|表达式|函数 【from 表】 【where 条件】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1、多条查询语句的查询的列数必须是一致的</span></span><br><span class="line"><span class="comment">2、多条查询语句的查询的列的类型和顺序要一致</span></span><br><span class="line"><span class="comment">3、union代表去重，union all代表不去重</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#查询部门编号<span class="operator">&gt;</span><span class="number">90</span>或者邮箱包含a的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">or</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line">#等同于</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">#查询中国用户中男性的信息以及外国用户中年男性的用户信息</span><br><span class="line"><span class="keyword">select</span> id, cname, csex <span class="keyword">from</span> t_ca <span class="keyword">where</span> csex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> t_id, tName, tGender <span class="keyword">from</span> t_ua <span class="keyword">where</span> tGender <span class="operator">=</span> <span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Day2</title>
      <link href="/2021/03/18/MySQL45-2/"/>
      <url>/2021/03/18/MySQL45-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h3 id="1、排序查询"><a href="#1、排序查询" class="headerlink" title="1、排序查询"></a><strong>1、排序查询</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">要查询的东西</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段<span class="operator">|</span>表达式<span class="operator">|</span>函数<span class="operator">|</span>别名 【<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>】</span><br><span class="line">(默认升序)</span><br></pre></td></tr></table></figure><h4 id="实践代码"><a href="#实践代码" class="headerlink" title="实践代码"></a>实践代码</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="operator">&gt;=</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hiredate <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line">#按年薪的高低显示员工的信息和年薪（按表达式排序）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>, salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>ifnull(commission_pct, <span class="number">0</span>)) <span class="keyword">as</span> 年薪</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">#<span class="keyword">order</span> <span class="keyword">by</span> salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>ifnull(commission_pct, <span class="number">0</span>)) <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 年薪 <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#按姓名长度显示员工的姓名和工资【按函数排序】</span><br><span class="line"><span class="keyword">select</span> length(last_name) <span class="keyword">as</span> 字节长度, last_name, salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字节长度 <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#查询员工信息，先按工资什序，再按员工编号降序【按多个字段排序】</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>, employee_id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="2、常见函数"><a href="#2、常见函数" class="headerlink" title="2、常见函数"></a><strong>2、常见函数</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">select</span> 函数名()</span><br><span class="line">【<span class="keyword">from</span> 表】</span><br></pre></td></tr></table></figure><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a><strong>单行函数</strong></h4><h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*concat拼接</span></span><br><span class="line"><span class="comment">substr截取子串</span></span><br><span class="line"><span class="comment">upper转换成大写</span></span><br><span class="line"><span class="comment">lower转换成小写</span></span><br><span class="line"><span class="comment">trim去前后指定的空格和字符</span></span><br><span class="line"><span class="comment">ltrim去左边空格</span></span><br><span class="line"><span class="comment">rtrim去右边空格</span></span><br><span class="line"><span class="comment">replace替换</span></span><br><span class="line"><span class="comment">lpad左填充</span></span><br><span class="line"><span class="comment">rpad右填充</span></span><br><span class="line"><span class="comment">instr返回子串第一次出现的索引</span></span><br><span class="line"><span class="comment">length 获取字节个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;length&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;select&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;WERTY&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> concat(<span class="built_in">upper</span>(last_name), <span class="built_in">lower</span>(first_name)) 姓名 <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;李莫愁神雕侠侣&#x27;</span>, <span class="number">4</span>) <span class="keyword">as</span> aa;#索引从<span class="number">1</span>开始</span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;李莫愁神雕侠侣&#x27;</span>, <span class="number">4</span>, <span class="number">2</span>) <span class="keyword">as</span> aa;#后面的<span class="number">2</span>表示字符长度</span><br><span class="line"><span class="keyword">select</span> concat(substr(last_name, <span class="number">1</span>, <span class="number">1</span>), <span class="string">&#x27;_&#x27;</span>, <span class="built_in">lower</span>(substr(last_name, <span class="number">2</span>))) aa <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> instr(<span class="string">&#x27;倚天屠龙记屠龙记&#x27;</span>, <span class="string">&#x27;屠龙记&#x27;</span>) <span class="keyword">as</span> aa;  #找不到返回<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> length(<span class="built_in">trim</span>(<span class="string">&#x27;     子怡     &#x27;</span>)) <span class="keyword">as</span> aa;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;aaa子怡aaaa&#x27;</span>) <span class="keyword">as</span> aa;</span><br><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;你好&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>) output;</span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;你好&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;*&#x27;</span>) output;</span><br><span class="line"><span class="keyword">select</span> replace(<span class="string">&#x27;张无忌_周芷若_周芷若_周芷若&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>) aa;</span><br></pre></td></tr></table></figure><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*round 四舍五入</span></span><br><span class="line"><span class="comment">rand 随机数</span></span><br><span class="line"><span class="comment">floor向下取整</span></span><br><span class="line"><span class="comment">ceil向上取整</span></span><br><span class="line"><span class="comment">mod取余</span></span><br><span class="line"><span class="comment">truncate截断*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">-1.35</span>);</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">1.5664</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.564</span>);#<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1</span>);#<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.564</span>);#<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1</span>);#<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">truncate</span>(<span class="number">1.6932</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>, <span class="number">3</span>);#<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">-10</span>, <span class="number">3</span>);#<span class="number">-1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>, <span class="number">-3</span>);  #<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">-10</span>, <span class="number">-3</span>);#<span class="number">-1</span>  总结：符号和被除数保持一致</span><br></pre></td></tr></table></figure><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*now当前系统日期+时间</span></span><br><span class="line"><span class="comment">curdate当前系统日期</span></span><br><span class="line"><span class="comment">curtime当前系统时间</span></span><br><span class="line"><span class="comment">datediff(date1, date2)日期之差date1-date2</span></span><br><span class="line"><span class="comment">str_to_date 将字符转换成日期</span></span><br><span class="line"><span class="comment">date_format将日期转换成字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"><span class="keyword">select</span> curdate();</span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(now()) 年, <span class="keyword">month</span>(now()) 月;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;1998-8-18&#x27;</span>) 年;</span><br><span class="line"><span class="keyword">select</span> monthname(now()) 月;</span><br><span class="line"><span class="keyword">select</span> datediff(now(), <span class="string">&#x27;1998-10-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#str_to_data：将日期格式的字符转换成指定格式日期</span><br><span class="line"><span class="keyword">select</span> str_to_date(<span class="string">&#x27;1992-4-3&#x27;</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) output;</span><br><span class="line">#查询入职日期为<span class="number">1992</span><span class="number">-4</span><span class="number">-3</span>的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hiredate<span class="operator">=</span><span class="string">&#x27;1992-4-3&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hiredate<span class="operator">=</span>str_to_date(<span class="string">&#x27;4-3-1992&#x27;</span>, <span class="string">&#x27;%m-%d-%Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#<span class="type">date</span><span class="operator">-</span>format：将日期转换成字符</span><br><span class="line"><span class="keyword">select</span> date_format(now(), <span class="string">&#x27;%Y年%m月%d日&#x27;</span>);</span><br><span class="line">#查询有奖金的员工名和入职日期</span><br><span class="line"><span class="keyword">select</span> last_name, date_format(hiredate, <span class="string">&#x27;%m月/%d日 %Y年&#x27;</span>) 入职日期</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> commission_pct <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*version版本</span></span><br><span class="line"><span class="comment">database当前库</span></span><br><span class="line"><span class="comment">user当前连接用户*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();</span><br></pre></td></tr></table></figure><h5 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*if 处理双分支</span></span><br><span class="line"><span class="comment">case语句 处理多分支</span></span><br><span class="line"><span class="comment">情况1：处理等值判断</span></span><br><span class="line"><span class="comment">情况2：处理条件判断*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if(<span class="number">10</span> <span class="operator">&gt;</span> <span class="number">5</span>, <span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;小&#x27;</span>) aa;</span><br><span class="line"><span class="keyword">select</span> last_name, commission_pct,  if(commission_pct <span class="keyword">is</span> <span class="keyword">null</span>, <span class="string">&#x27;没奖金&#x27;</span>, <span class="string">&#x27;有奖金&#x27;</span>) aa</span><br><span class="line"><span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">case的使用法一：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">case 要判断的字段或表达式</span></span><br><span class="line"><span class="comment">when 条件1 then 要显示的值1或语句1</span></span><br><span class="line"><span class="comment">when 条件2 then 要显示的值2或语句2</span></span><br><span class="line"><span class="comment">when 条件3 then 要显示的值3或语句3</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">else 要显示的值n或语句n</span></span><br><span class="line"><span class="comment">end 【as 别名】</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> salary 原始工资, department_id,</span><br><span class="line"><span class="keyword">case</span> department_id</span><br><span class="line"><span class="keyword">when</span> <span class="number">30</span> <span class="keyword">then</span> salary<span class="operator">*</span><span class="number">1.1</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">40</span> <span class="keyword">then</span> salary<span class="operator">*</span><span class="number">1.2</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">50</span> <span class="keyword">then</span> salary<span class="operator">*</span><span class="number">1.3</span></span><br><span class="line"><span class="keyword">else</span> salary</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> 新工资</span><br><span class="line"><span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">case的使用法二：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">case </span></span><br><span class="line"><span class="comment">when 条件1 then 要显示的值1或语句1</span></span><br><span class="line"><span class="comment">when 条件2 then 要显示的值2或语句2</span></span><br><span class="line"><span class="comment">when 条件3 then 要显示的值3或语句3</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">else 要显示的值n或语句n</span></span><br><span class="line"><span class="comment">end 【as 别名】</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> salary 原始工资, department_id,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">when</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">then</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">when</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">then</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">as</span> 工资级别</span><br><span class="line"><span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a><strong>分组函数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*sum 求和</span></span><br><span class="line"><span class="comment">max 最大值</span></span><br><span class="line"><span class="comment">min 最小值</span></span><br><span class="line"><span class="comment">avg 平均值</span></span><br><span class="line"><span class="comment">count 计数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1、以上五个分组函数都忽略null值且不计入总数，</span></span><br><span class="line"><span class="comment">2、sum和avg一般用于处理数值型</span></span><br><span class="line"><span class="comment">max、min、count可以处理任何数据类型</span></span><br><span class="line"><span class="comment">    3、都可以搭配distinct使用，用于统计去重后的结果</span></span><br><span class="line"><span class="comment">4、count的参数可以支持：字段、*、常量值，一般放1</span></span><br><span class="line"><span class="comment">count(*)，计算行数时null的也会包含进去，效率高，最常用</span></span><br><span class="line"><span class="comment">count(1)，计算行数时null的也会包含进去，效率高</span></span><br><span class="line"><span class="comment">count(字段名)，得到的结果将是除去值为null和重复数据后的结果，效率低</span></span><br><span class="line"><span class="comment">5、和分组函数一同查询的字段要求是group by后的字段</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(salary) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(salary) <span class="keyword">from</span> employees;</span><br><span class="line">#组合</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary), <span class="built_in">max</span>(salary), round(<span class="built_in">avg</span>(salary)) <span class="keyword">from</span> employees;</span><br><span class="line">#查询部门编号为<span class="number">90</span>的员工个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> 个数</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="operator">=</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*语法：</span></span><br><span class="line"><span class="comment">select 查询的字段，分组函数</span></span><br><span class="line"><span class="comment">from 表</span></span><br><span class="line"><span class="comment">【where 筛选条件】</span></span><br><span class="line"><span class="comment">group by 分组的字段</span></span><br><span class="line"><span class="comment">【order by 子句】</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1、可以按单个字段分组</span></span><br><span class="line"><span class="comment">2、和分组函数一同查询的字段最好是分组后的字段</span></span><br><span class="line"><span class="comment">3、分组筛选</span></span><br><span class="line"><span class="comment">            针对的表         位置    关键字</span></span><br><span class="line"><span class="comment">      分组前筛选：原始表      group by的前面where</span></span><br><span class="line"><span class="comment">      分组后筛选：分组后的结果集   group by的后面 having</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、可以按多个字段分组，字段之间用逗号隔开</span></span><br><span class="line"><span class="comment">5、可以支持排序</span></span><br><span class="line"><span class="comment">6、having后可以支持别名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询每个工种的最高工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary), job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job_id;</span><br><span class="line"></span><br><span class="line">#查询每个位置的部门个数</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), location_id</span><br><span class="line"><span class="keyword">from</span> departments</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> location_id;</span><br><span class="line"></span><br><span class="line">#查询邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary), department_id, email</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> email <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id;</span><br><span class="line"></span><br><span class="line">#查询有奖金的每个领导手下员工的最高工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary), manager_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> commission_pct <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> manager_id;</span><br><span class="line"></span><br><span class="line">#查询哪个部门的员工个数大于<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), department_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">#查询每个工种有奖金的员工的最高工资<span class="operator">&gt;</span><span class="number">12000</span>的工种编号和最高工资</span><br><span class="line"><span class="keyword">select</span> job_id, <span class="built_in">max</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> commission_pct <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">max</span>(salary) <span class="operator">&gt;</span> <span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line">#查询领导编号大于<span class="number">102</span>的每个领导手下的最低工资<span class="operator">&gt;</span><span class="number">5000</span>的领导编号是哪个，以及其最低工资</span><br><span class="line"><span class="keyword">select</span> manager_id, <span class="built_in">min</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> manager_id <span class="operator">&gt;</span> <span class="number">102</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> manager_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">min</span>(salary) <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">#按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数<span class="operator">&gt;</span><span class="number">5</span>的有哪些</span><br><span class="line"><span class="keyword">select</span> length(concat(first_name, last_name)) 长度, <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> length(concat(first_name, last_name))</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">#查询每个部门，每个工种员工的平均工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary), department_id, job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id, job_id;</span><br><span class="line"></span><br><span class="line">#查询每个部门，每个工种员工的平均工资，平均工资大于<span class="number">10000</span>，并且按平均工资的高低显示出来</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary), department_id, job_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> department_id, job_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">avg</span>(salary) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_二叉树的应用_练习题</title>
      <link href="/2020/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8-%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2020/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%94%E7%94%A8-%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>树与二叉树的应用包括二叉排序树、平衡二叉树、哈夫曼树等等</p><h5 id="二叉排序树的一些基本操作"><a href="#二叉排序树的一些基本操作" class="headerlink" title="二叉排序树的一些基本操作"></a>二叉排序树的一些基本操作</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉排序树的非递归查找</span></span><br><span class="line"><span class="function">BiTree <span class="title">BSTSearch</span><span class="params">(BiTree T, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">nullptr</span> &amp;&amp; T-&gt;data != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">            T = T-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            T = T-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的递归查找</span></span><br><span class="line"><span class="function">BiTree <span class="title">BSTSearch2</span><span class="params">(BiTree T, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (key == T-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTSearch2</span>(T-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTSearch2</span>(T-&gt;rchild, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BSTInsert</span><span class="params">(BiTree &amp;T, ElemType key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当查找失败时，会开始插入key结点</span></span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        T = (BiTree) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiTree));</span><br><span class="line">        T-&gt;data = key;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == T-&gt;data) &#123;</span><br><span class="line">        <span class="comment">//若已经存在，则插入失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; T-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTInsert</span>(T-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSTInsert</span>(T-&gt;rchild, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的构造</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BSTCreate</span><span class="params">(BiTree &amp;T, ElemType key[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始时二叉排序树为空</span></span><br><span class="line">    T = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="built_in">BSTInsert</span>(T, key[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二叉树树的应用"><a href="#二叉树树的应用" class="headerlink" title="二叉树树的应用"></a>二叉树树的应用</h5><p>判断一个给定的二叉树是否是二叉排序树，算法思想，因为二叉排序树的中序遍历是从小到大的，因此只需判断其中序遍历是否从小到大有序即可</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> MIN = <span class="number">-32767</span>;    <span class="comment">//首先设定一个用于比较的最小值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">JudegBST</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b1, b2;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//空树</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b1 = <span class="built_in">JudegBST</span>(T-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span> (b1 == <span class="number">0</span> || MIN &gt;= T-&gt;data)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        MIN = T-&gt;data;</span><br><span class="line">        b2 = <span class="built_in">JudegBST</span>(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> b2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求出指定结点在二叉排序树中的层次，算法思想：查找一次就下降一层</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SarchLevel</span><span class="params">(BiTree T, BiTree key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="keyword">if</span> (T) &#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;data != key-&gt;data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key-&gt;data &lt; p-&gt;data)</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用二叉树遍历的思想判断一个二叉树是否是平衡二叉树，算法思想：高度为0或1，则为平衡二叉树，否则左右子树的高度差不能大于1，balance判断是否是平衡二叉树，h表示高度，int &amp;balance, int &amp;h加引用(&amp;)的原因是会被修改</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">JudgeAVL</span><span class="params">(BiTree T, <span class="keyword">int</span> &amp;balance, <span class="keyword">int</span> &amp;h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//左右子树的平衡标记和高度</span></span><br><span class="line">    <span class="keyword">int</span> bl, br, hl, hr;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>) &#123; <span class="comment">//树空</span></span><br><span class="line">        balance = <span class="number">1</span>;</span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;lchild == <span class="literal">nullptr</span> &amp;&amp; T-&gt;rchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">//仅有根结点</span></span><br><span class="line">        h = <span class="number">1</span>;</span><br><span class="line">        balance = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">JudgeAVL</span>(T-&gt;rchild, bl, hl);</span><br><span class="line">        <span class="built_in">JudgeAVL</span>(T-&gt;rchild, br, hr);</span><br><span class="line">        <span class="comment">//这里加1加的是根结点，因为前面已经处理了根结点</span></span><br><span class="line">        h = (hl &gt; hr ? hl : hr) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(hl - hr) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//左右子树都平衡才整体平衡</span></span><br><span class="line">            balance = bl &amp; br;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            balance = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求出给定二叉排序序树中的最大值和最小值的关键字，算法思想：对于二叉排序树，最小值在左下角，最大值在右下角</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">MaxKey</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T-&gt;rchild != <span class="literal">nullptr</span>)</span><br><span class="line">        T = T-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">MinKey</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T-&gt;lchild != <span class="literal">nullptr</span>)</span><br><span class="line">        T = T-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> T-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从大到小输出二叉排序树中所有不小于k的值，算法思想：因为是从大到小输出，所以先遍历右子树，再遍历左子树，用递归的方法可以从最大开始，直到最小</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutPutKey</span><span class="params">(BiTree T, ElemType k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;rchild != <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="built_in">OutPutKey</span>(T-&gt;rchild, k);</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;data == k)</span><br><span class="line">        cout &lt;&lt; T-&gt;data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;lchild != <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="built_in">OutPutKey</span>(T-&gt;lchild, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_二叉树的遍历/线索二叉树</title>
      <link href="/2020/03/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/03/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>原始头文件和一些其中会用到的函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by XuYiMing on 2020/3/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的链式存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">visit</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> T-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树遍历方法"><a href="#二叉树遍历方法" class="headerlink" title="二叉树遍历方法"></a>二叉树遍历方法</h4><h5 id="用递归方法解决遍历问题"><a href="#用递归方法解决遍历问题" class="headerlink" title="用递归方法解决遍历问题"></a>用递归方法解决遍历问题</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">PreOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PostOrder</span>(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    queue&lt;BiTree&gt; q;</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    q.<span class="built_in">push</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild != <span class="literal">nullptr</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(p-&gt;lchild);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;rchild != <span class="literal">nullptr</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用非递归方法解决遍历问题"><a href="#用非递归方法解决遍历问题" class="headerlink" title="用非递归方法解决遍历问题"></a>用非递归方法解决遍历问题</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先序遍历非递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="built_in">visit</span>(p);</span><br><span class="line">            s.<span class="built_in">push</span>(p-&gt;data);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历非递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(p-&gt;data);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="built_in">visit</span>(p);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历非递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder2</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    stack&lt;BiTree&gt; s;</span><br><span class="line">    BiTree p = T;</span><br><span class="line">    <span class="comment">//r为辅助指针，用于指向最近访问过的结点</span></span><br><span class="line">    BiTree r = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//走到最左边，找到后序遍历的第一个结点</span></span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//读取栈顶结点</span></span><br><span class="line">            p = s.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">//右子节点存在且未被访问过</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild &amp;&amp; p-&gt;rchild != r) &#123;</span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">                s.<span class="built_in">push</span>(p);</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则从栈中弹出还未被访问的结点</span></span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">visit</span>(p);</span><br><span class="line">                <span class="comment">//把r指向该节点已被访问</span></span><br><span class="line">                r = p;</span><br><span class="line">                <span class="comment">//每次出栈访问完一个结点都是该结点的子树，需将p置null</span></span><br><span class="line">                p = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线索二叉树的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ltag, rtag;</span><br><span class="line">    <span class="comment">//tag为0表示孩子，为1表示前驱/后继</span></span><br><span class="line">&#125; ThreadNode, *ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序线索二叉树的递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThread</span><span class="params">(ThreadTree &amp;p, ThreadTree &amp;pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">//递归线索化左子树</span></span><br><span class="line">        <span class="built_in">InThread</span>(p-&gt;lchild, pre);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            p-&gt;lchild = pre;</span><br><span class="line">            p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">nullptr</span> &amp;&amp; pre-&gt;rchild == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            pre-&gt;rchild = p;</span><br><span class="line">            pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        <span class="built_in">InThread</span>(pre-&gt;rchild, pre);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立中序线索二叉树的过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateInThread</span><span class="params">(ThreadTree T)</span> </span>&#123;</span><br><span class="line">    ThreadTree pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">//线索化二叉树</span></span><br><span class="line">        <span class="built_in">InThread</span>(T, pre);</span><br><span class="line">        <span class="comment">//处理遍历后的最后一个结点</span></span><br><span class="line">        pre-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">        pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
